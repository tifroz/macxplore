// Generated by CoffeeScript 1.7.1
var csvEscape, cursor2JsonArray, jsonToCsv, logger, mr2FlatJson, through, truncate, util, valueForKeyPath, _;

through = require('through');

_ = require('underscore');

logger = require('maclogger');

util = require('util');

valueForKeyPath = function(obj, keyPath) {
  var k, kp, value, _i, _len;
  kp = keyPath.split(".");
  value = obj;
  for (_i = 0, _len = kp.length; _i < _len; _i++) {
    k = kp[_i];
    value = value[k];
    if (!_.isObject(value)) {
      break;
    }
  }
  logger.log("valueForKeyPath, for " + keyPath + "=" + value);
  return value;
};

csvEscape = function(any) {
  var keyPath, str;
  if (any === void 0 || any === null) {
    return any;
  } else {
    keyPath = any.toString().split(".");
    str = any.toString();
  }
  if (str.indexOf("\"") >= 0) {
    str.replace("\"", "\"\"");
  }
  if (str.indexOf(",") >= 0 || str.indexOf("\n") >= 0 || str.indexOf("\"") >= 0) {
    return "\"" + str + "\"";
  } else {
    return str;
  }
};

cursor2JsonArray = function() {
  var end, first, stream, write;
  first = true;
  write = function(data) {
    logger.log(util.format("cursor2JsonArray data: %j", data));
    if (first) {
      first = false;
      this.queue("[\n");
    } else {
      this.queue(",\n");
    }
    return this.queue(util.format("%j", data));
  };
  end = function(data) {
    if (first) {
      this.queue("[]");
    } else {
      this.queue("\n]");
    }
    return this.queue(null);
  };
  stream = through(write, end);
  return stream;
};

jsonToCsv = function() {
  var cols, end, first, stream, write;
  first = true;
  cols = [];
  write = function(data) {
    var index, key, obj, row, subKeys, subkey, _i, _ref;
    logger.log(util.format("jsonToCsv data: %j", data));
    if (first) {
      first = false;
      cols = _.keys(data);
      for (index = _i = _ref = cols.length - 1; _ref <= 0 ? _i <= 0 : _i >= 0; index = _ref <= 0 ? ++_i : --_i) {
        key = cols[index];
        obj = data[key];
        logger.log(util.format("For key " + key + ", isObject " + (_.isObject(obj)) + ", %j", obj));
        if (_.isObject(obj)) {
          logger.log("For key " + key + ", sub-Keys " + (_.keys(obj)));
          subKeys = (function() {
            var _j, _len, _ref1, _results;
            _ref1 = _.keys(obj);
            _results = [];
            for (_j = 0, _len = _ref1.length; _j < _len; _j++) {
              subkey = _ref1[_j];
              _results.push("" + key + "." + subkey);
            }
            return _results;
          })();
          logger.log("For key " + key + ", subKeys " + subKeys);
          cols.splice(index, 1, subKeys);
        }
      }
      cols = _.flatten(cols);
      logger.log("json2Csv columns: " + cols);
      this.queue(cols.join(",") + "\n");
    }
    row = (function() {
      var _j, _len, _results;
      _results = [];
      for (_j = 0, _len = cols.length; _j < _len; _j++) {
        key = cols[_j];
        _results.push(csvEscape(valueForKeyPath(data, key)));
      }
      return _results;
    })();
    return this.queue(row.join(",") + "\n");
  };
  end = function(data) {
    logger.log(util.format("jsonToCsv done"));
    return this.queue(null);
  };
  stream = through(write, end);
  return stream;
};

mr2FlatJson = function() {
  var end, first, stream, valueIsObject, write;
  first = true;
  valueIsObject = false;
  write = function(data) {
    var result;
    if (first) {
      first = false;
      valueIsObject = _.isObject(data.value);
    }
    if (valueIsObject) {
      result = {
        _id: data._id
      };
      _.extend(result, data.value);
      return this.queue(result);
    } else {
      return this.queue(data);
    }
  };
  end = function(data) {
    return this.queue(null);
  };
  stream = through(write, end);
  return stream;
};

truncate = function(max) {
  var count, end, stream, write;
  count = 0;
  write = function(data) {
    count++;
    if (count <= max) {
      return this.queue(data);
    }
  };
  end = function(data) {
    return this.queue(null);
  };
  stream = through(write, end);
  return stream;
};

module.exports = {
  json2Csv: jsonToCsv,
  mr2FlatJson: mr2FlatJson,
  cursor2JsonArray: cursor2JsonArray,
  truncate: truncate
};

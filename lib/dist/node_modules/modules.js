// Generated by CoffeeScript 1.7.1

/**
* Modules dependencies
 */
var dirExclude, dirInclude, fs, jsExclude, jsInclude, path, sys, _,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

sys = require('sys');

fs = require('fs');

_ = require('underscore');

path = require('path');

jsInclude = /(^[^\.].*)\.js/;

jsExclude = /index.js|.*skip.js/;

dirInclude = /^[^\.].*/;

dirExclude = /\..*/;

module.exports = {

  /**
  	* Recursively scans the directory for module files & module directories
  	* @param {String} directory path
  	* @param {Hash} {include: []} - include non-module files as buffers (e.g ['csv'] to include csv files)
  	* @returns {Array} require-ready strings, eg ['./thismodule', './thatmoduledir']
  	* The returned array is sorted consistently with module loading orders, aka:
  	* 	- modules in directories closer to the root take precedence (loaded before subdirectories)
  	*		- within the same directory modules are loaded in alphabetical order
   */
  scan: function(dirname, options) {
    var ls, modules;
    ls = fs.readdirSync(dirname);
    ls = ls.sort(function(path1, path2) {
      var isFilePath1, isFilePath2;
      isFilePath1 = fs.statSync(path.join(dirname, path1)).isFile();
      isFilePath2 = fs.statSync(path.join(dirname, path2)).isFile();
      if (isFilePath1 && !isFilePath2) {
        return -1;
      } else if (isFilePath2 && !isFilePath1) {
        return 1;
      } else if (path1 < path2) {
        return -1;
      } else {
        return 1;
      }
    });
    return modules = _(ls).chain().filter(function(name) {
      var absoluteRef, include, isDataFile, isDir, isFile, isModuleDir, isModuleFile, _ref, _ref1;
      absoluteRef = path.join(dirname, name);
      isFile = fs.statSync(absoluteRef).isFile();
      isModuleFile = isFile && (name.match(jsInclude) && !name.match(jsExclude));
      isDataFile = false;
      if (options != null ? (_ref = options.include) != null ? _ref.length : void 0 : void 0) {
        isDataFile = isFile && !isModuleFile && (_ref1 = name.split('.').pop(), __indexOf.call(options.include, _ref1) >= 0);
      }
      isDir = fs.statSync(absoluteRef).isDirectory() && name.match(dirInclude) && !name.match(dirExclude);
      isModuleDir = isDir && (_(fs.readdirSync(absoluteRef)).indexOf('index.js') > -1);
      include = isModuleFile || isDataFile || isModuleDir;
      return include;
    }).map(function(name) {
      if (name.match(jsInclude)) {
        return path.join(dirname, jsInclude.exec(name)[1]);
      } else {
        return path.join(dirname, name);
      }
    }).value();
  }
};

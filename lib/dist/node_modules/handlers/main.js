// Generated by CoffeeScript 1.7.1
var MongoDoc, Report, Seq, cursor2JsonArray, getReport, handleError, json2Csv, logger, main, sendReport, sendReportList, truncate, util, _;

_ = require('underscore');

Report = require('models').Report;

util = require('util');

Seq = require('seq');

logger = require('maclogger');

MongoDoc = require('macmodel');

json2Csv = require("helpers").streams.json2Csv;

truncate = require("helpers").streams.truncate;

cursor2JsonArray = require("helpers").streams.cursor2JsonArray;

handleError = function(res, boo) {
  res.setHeader("Content-Type", "application/json");
  return res.send(500, util.format("%j", {
    message: boo.message,
    stack: boo.stack
  }));
};

main = function(app) {
  app.get("/", function(req, res) {
    return res.render("main");
  });
  app.get("/sandbox", function(req, res) {
    return res.render("sandbox");
  });
  app.get("/preview", function(req, res) {
    return res.render("preview");
  });
  app.get("/reports", sendReportList);
  app.get("/report/:_id", sendReport);
  app.get("/report/output/:_id/:name", function(req, res) {
    var report;
    report = new Report({
      _id: req.params._id
    });
    return Seq().seq(function() {
      return report.fillFromStorage(this);
    }).seq(function() {
      var reportType;
      reportType = report.data().type;
      switch (reportType) {
        case "find":
        case "aggregate":
          return report.getCursor(this);
        case "group":
        case "distinct":
        case "mapReduce":
        case "count":
          return report.getStream(this);
        default:
          return this(new Error("Report type '" + reportType + "' not handled"));
      }
    }).seq(function(obj) {
      var cursor, stream;
      if (_.isFunction(obj.limit)) {
        cursor = obj;
        res.writeHead(200, {
          "Content-Type": "text/csv"
        });
        if (req.params.name === "__sample.csv") {
          return cursor.limit(10).stream().pipe(json2Csv()).pipe(res);
        } else {
          return cursor.stream().pipe(json2Csv()).pipe(res);
        }
      } else {
        stream = obj;
        res.writeHead(200, {
          "Content-Type": "text/csv"
        });
        if (req.params.name === "__sample.csv") {
          return stream.pipe(truncate(10)).pipe(json2Csv()).pipe(res);
        } else {
          return stream.pipe(json2Csv()).pipe(res);
        }
      }
    })["catch"](function(boo) {
      return handleError(res, boo);
    });
  });

  /*
  	app.get "/report/recentdoc/:_id", (req, res)->
  		dbname = null
  		colname = null
  		report = new Report(_id: req.params._id)
  		Seq().seq ->
  			report.getTargetedCollection this
  		.seq (c)->
  			c.findOne {}, {sort:{_id: -1}}, this
  		.seq (doc)->
  			res.setHeader "Content-Type", "application/json"
  			res.send util.format("%j", doc: doc)
  		.catch (boo)->
  			handleError res, boo
   */
  app.get("/report/sampledoc/:_id", function(req, res) {
    var colname, dbname, report;
    dbname = null;
    colname = null;
    report = new Report({
      _id: req.params._id
    });
    return Seq().seq(function() {
      return report.fillFromStorage(this);
    }).seq(function() {
      return report.getSampleCursor(this);
    }).seq(function(cursor) {
      res.writeHead(200, {
        "Content-Type": "application/json"
      });
      return cursor.limit(3).stream().pipe(cursor2JsonArray()).pipe(res);
    });
  });
  app.get("/:dbname/collections", function(req, res) {
    var dbname;
    dbname = req.params.dbname;
    return Seq().seq(function() {
      if (MongoDoc.db.databases[dbname] === void 0) {
        return MongoDoc.db.linkDatabaseIfExists(dbname, this);
      } else {
        return this();
      }
    }).seq(function() {
      var payload;
      payload = {
        collections: []
      };
      if (MongoDoc.db.databases[dbname] !== void 0) {
        payload.collections = _.keys(MongoDoc.db.databases[dbname].getCollections());
      }
      res.setHeader("Content-Type", "application/json");
      return res.send(util.format("%j", payload));
    })["catch"](function(boo) {
      return handleError(res, boo);
    });
  });
  app.post("/report/duplicate/:_id", function(req, res) {
    return Seq().seq(function() {
      return getReport(req.params._id, this);
    }).seq(function(original) {
      var r, report;
      r = Report.makeCopy(original);
      return report = new Report(r.data(), this);
    }).seq(function() {
      return sendReportList(req, res);
    })["catch"](function(boo) {
      return handleError(res, boo);
    });
  });
  app.post("/report", function(req, res) {
    logger.log(util.format("body: %j", req.body));
    return Seq().seq(function() {
      var r, report;
      r = Report.makeDefaultReport(req.body.database, req.body.collection);
      return report = new Report(r.data(), this);
    }).seq(function() {
      return sendReportList(req, res);
    })["catch"](function(boo) {
      return handleError(res, boo);
    });
  });
  app["delete"]("/report/:_id", function(req, res) {
    return Seq().seq(function() {
      var report;
      report = new Report({
        _id: req.params._id
      });
      return report.remove(this);
    }).seq(function() {
      return sendReportList(req, res);
    })["catch"](function(boo) {
      return handleError(res, boo);
    });
  });
  return app.put("/report/:_id", function(req, res) {
    return Seq().seq(function() {
      var report;
      report = new Report({
        _id: req.params._id
      });
      return report.update(req.body, this);
    }).seq(function() {
      return sendReport(req, res);
    })["catch"](function(boo) {
      return handleError(res, boo);
    });
  });
};

getReport = function(_id, fn) {
  return Seq().seq(function() {
    logger.log("fetching report " + _id);
    return Report.fetchOne({
      _id: _id
    }, this);
  }).seq(function(report) {
    logger.log("fetched report " + _id);
    if (report) {
      return typeof fn === "function" ? fn(null, report) : void 0;
    } else {
      return typeof fn === "function" ? fn(new Error("No report found with id " + req.params._id)) : void 0;
    }
  })["catch"](function(boo) {
    return typeof fn === "function" ? fn(boo) : void 0;
  });
};

sendReport = function(req, res) {
  return Seq().seq(function() {
    logger.log("getting report");
    return getReport(req.params._id, this);
  }).seq(function(report) {
    logger.log("sending report");
    res.setHeader("Content-Type", "application/json");
    return res.send(util.format("%j", {
      report: report.data()
    }));
  })["catch"](function(boo) {
    return handleError(res, boo);
  });
};

sendReportList = function(req, res) {
  return Seq().seq(function() {
    logger.info(util.format("Report.resolveCollection: " + (Report.resolveCollection())));
    return Report.fetch({}, {
      sort: {
        name: -1
      },
      fields: ["_id", "name", "comments"]
    }, this);
  }).seq(function(reports) {
    var payload, r;
    logger.info("db\n" + (_.keys(MongoDoc.db)));
    payload = {
      reports: (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = reports.length; _i < _len; _i++) {
          r = reports[_i];
          _results.push(r.data());
        }
        return _results;
      })()
    };
    res.setHeader("Content-Type", "application/json");
    return res.send(util.format("%j", payload));
  })["catch"](function(boo) {
    return handleError(res, boo);
  });
};

module.exports = main;
